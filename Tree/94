//Recursive
//Python3
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        res = []
        
        def inorder(root):
            if not root:
                return
            inorder(root.left)
            res.append(root.val)
            inorder(root.right)
            
        inorder(root)
        return res  //dont forget this part
// Time complexity of this algorithm doing it recursivly : O[n] (need visit every single node)
// Maximum memorty complexity: O[n] (use stack to store)

//Iteration
//Python3
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        res = []
        stack = []
        cur = root
        while cur or stack:
            while cur:
                stack.append(cur)
                cur = cur.left
            cur = stack.pop()
            res.append(cur.val)
            cur = cur.right
        return res

//Java
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        
        
        Stack<TreeNode> stack = new Stack<>();
        List<Integer> output_arr = new ArrayList<>();
        
        if(root == null) {
            return output_arr;
        }
        
        TreeNode current = root;
        
        while (current != null || !stack.isEmpty()) {
            while (current !=null) {
                stack.push(current);
                current = current.left;
            }
            
            current = stack.pop();
            output_arr.add(current.val);
            current = current.right;
        }
        
        return output_arr;
    }
}
