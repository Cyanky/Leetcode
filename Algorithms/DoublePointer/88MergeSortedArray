class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        last = m + n -1
        
        while m > 0 and n > 0:
            if nums1[m - 1] > nums2[n - 1]:
                nums1[last] = nums1[m -1]
                m -= 1
            else:
                nums1[last] = nums2[n - 1]
                n -= 1
            last -= 1/////*****************

        while n > 0://***************when there's no more integer in nums1 but still in the nums2
            nums1[last] = nums2[n - 1]
            n, last = n - 1, last - 1
            
            ---------------O(N) O(1)
            
------------------------------------------------
##JAVA
------------------------------------------------
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int k = m + n - 1;
        int i = m - 1;
        int j = n - 1;
        
        while(i >= 0 && j >= 0){
            nums1[k--] = (nums1[i]>nums2[j]?nums1[i--]:nums2[j--]);
        }
        while(j >= 0){
            nums1[k--] = nums2[j--];
        }
    }
}

-----------------------TC = O(m+n)
-----------------------SC = O(1)
