************Brutal source
class Solution {
    public int removeElement(int[] nums, int val) {
        int size = nums.length;
        for (int i = 0; i < size; i++){
            if(nums[i] == val){
                for (int j = i + 1; j < size; j++){
                    nums[j-1] = nums[j];
                }
            i--;
            size--;
            }
        
        }
        return size;
    }
}
------------------------------------
Time: O(n^2)
Space: O(1)





class Solution {
    public int removeElement(int[] nums, int val) {
        if (nums.length == 0 || nums == null) return 0;
        
        int start = 0;
        for(int i = 0; i < nums.length; i++){
            if(nums[i] != val){
                nums[start] = nums[i];
                start++;
            }
        }
        return start;
    }
}

------------------------------------------
Time: O(N)
Space: O(1)


class Solution {
    public int removeElement(int[] nums, int val) {
        int leftIndex = 0;
        int rightIndex = nums.length - 1;
        while (leftIndex <= rightIndex){
            while(leftIndex <= rightIndex && nums[leftIndex] != val){
                leftIndex ++;
            }
            while(leftIndex <= rightIndex && nums[rightIndex] == val){
                rightIndex --;
            }
            if (leftIndex < rightIndex){
            nums[leftIndex++] = nums[rightIndex--];
            }
        }
        return leftIndex;
    }
}
