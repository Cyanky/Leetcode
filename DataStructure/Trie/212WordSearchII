class Solution {
    Set<String> res = new HashSet<>();
    public List<String> findWords(char[][] board, String[] words) {
        int M = board.length, N = board[0].length;
        Trie trie = new Trie();
        for(String word : words) trie.insert(word);
        boolean[][] visited = new boolean[M][N];
        for(int i = 0; i < M; i++)
            for(int j = 0; j < N; j++)
                dfs(board, visited, "", i, j, trie);
        return new ArrayList<String>(res);
    }
    
    public void dfs(char[][] board, boolean[][] visited, String str, int x, int y, Trie trie){
        if(x < 0 || x >= board.length || y < 0 || y >= board[0].length) return;
        if(visited[x][y]) return;
        str += board[x][y];
        if(!trie.startWith(str)) return;
        if(trie.search(str)) res.add(str);
        visited[x][y] = true;
        dfs(board, visited, str, x-1, y, trie);
        dfs(board, visited, str, x+1, y, trie);
        dfs(board, visited, str, x, y-1, trie);
        dfs(board, visited, str, x, y+1, trie);
        visited[x][y] = false;
    }
}

class Trie {
    TrieNode root;
    public Trie(){
        root = new TrieNode();
    }
    
    public void insert(String word){
        TrieNode node = root;
        for(char c : word.toCharArray()){
            if(node.children[c - 'a'] == null){
                node.children[c - 'a'] = new TrieNode();
            }
            node = node.children[c - 'a'];
        }
        node.isWord = true;
    }
    
    public boolean search(String word){
        TrieNode node = root;
        for(char c : word.toCharArray()){
            if(node.children[c - 'a'] == null) return false;
            node = node.children[c - 'a'];
        }
        return node.isWord;
    }
    
    public boolean startWith(String prefix){
        TrieNode node = root;
        for(char c : prefix.toCharArray()){
            if(node.children[c - 'a'] == null) return false;
            node = node.children[c - 'a'];
        }
        return true;
    }
}

class TrieNode {
    TrieNode[] children;
    boolean isWord;
    public TrieNode(){
        children = new TrieNode[26];
        
    }
}
