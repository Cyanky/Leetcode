class Solution {
//     TrieNode root;
    // Set<String> res = new HashSet<>();
//     public Trie(){
//         root = new TrieNode();
//     }
    
//     public void insert(String word){
//         TrieNode node = root;
//         for(char c : word.toCharArray()){
//             if(node.children[c - 'a'] == null){
//                 node.children[c - 'a'] = new TrieNode();
//             }
//             node = node.children[c - 'a'];
//         }
//         node.isWord = true;
//     }
    
//     public boolean search(String word){
//         TrieNode node = root;
//         for(char c : word.toCharArray()){
//             if(node.children[c - 'a'] == null) return false;
//             node = node.children[c - 'a'];
//         }
//         return node.isWord;
//     }
    
//     public boolean startWith(String prefix){
//         TrieNode node = root;
//         for(char c : word.toCharArray()){
//             if(node.children[c - 'a'] == null) return false;
//             node = node.children[c - 'a'];
//         }
//         return true;
//     }
    
    public boolean exist(char[][] board, String word) {
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[0].length; j++){
                if(helper(board, word, i, j, 0)){
                    return true;
                }
            }
        }
        return false;
        
    }
    
    public boolean helper(char[][] board, String word, int x, int y, int index){
        if(index == word.length()) return true;
        if(x < 0 || x >= board.length || y < 0 || y >= board[0].length || word.charAt(index) != board[x][y]) return false;
        char temp = board[x][y];
        board[x][y] = '*';
        boolean found = helper(board, word, x-1, y, index + 1)
            ||helper(board, word, x+1, y, index + 1)
            ||helper(board, word, x, y-1, index + 1)
            ||helper(board, word, x, y+1, index + 1);
        board[x][y] = temp;
        return found;
        
    }
}
